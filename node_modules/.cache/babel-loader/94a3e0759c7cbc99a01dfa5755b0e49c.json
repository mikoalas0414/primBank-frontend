{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { toLower, toUpper } from '../utils/utils';\nimport BigNumber from 'bignumber.js';\nexport const useInputValue = function (maxValue) {\n  _s();\n\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '18';\n  let fixedDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  const [value, _setValue] = useState('');\n  const [max, _setMax] = useState(false);\n  const [error, setError] = useState(null);\n  const [maxDisplayValue, setMaxDisplayValue] = useState(null);\n  useEffect(() => {\n    setMaxDisplayValue(toLower(maxValue, decimals).toFixed(fixedDecimals)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [maxValue]);\n\n  const setValue = _value => {\n    _setValue(_value !== null && _value !== void 0 ? _value : 0);\n\n    if (_value !== '' && isNaN(_value)) {\n      setError('Invalid Number!');\n      return;\n    }\n\n    if (!_value || _value === '' || _value === '0') {\n      setError(null);\n      return;\n    }\n\n    if (maxDisplayValue === _value) return;\n\n    _setMax(false);\n\n    if (toUpper(_value, decimals).gt(BigNumber(maxValue))) setError('Invalid Amount!');else setError(null);\n  };\n\n  const getValue = () => {\n    return max ? new BigNumber(maxValue).toString() : toUpper(value, decimals, true).toString();\n  };\n\n  const selectMaxValue = () => {\n    setError(null);\n\n    _setMax(true);\n\n    _setValue(toLower(maxValue, decimals).toFixed(fixedDecimals));\n  };\n\n  return {\n    value,\n    maxDisplayValue,\n    error,\n    setValue,\n    getValue,\n    selectMaxValue\n  };\n};\n\n_s(useInputValue, \"r8pa+Kvt0p8UP0wCAMvJqTU6XF4=\");","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useInputValue.jsx"],"names":["useEffect","useState","toLower","toUpper","BigNumber","useInputValue","maxValue","decimals","fixedDecimals","value","_setValue","max","_setMax","error","setError","maxDisplayValue","setMaxDisplayValue","toFixed","setValue","_value","isNaN","gt","getValue","toString","selectMaxValue"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,gBAAjC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,UAACC,QAAD,EAAkD;AAAA;;AAAA,MAAvCC,QAAuC,uEAA5B,IAA4B;AAAA,MAAtBC,aAAsB,uEAAN,CAAM;AAC7E,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBT,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACU,GAAD,EAAMC,OAAN,IAAiBX,QAAQ,CAAC,KAAD,CAA/B;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,IAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,kBAAkB,CAACd,OAAO,CAACI,QAAD,EAAWC,QAAX,CAAP,CAA4BU,OAA5B,CAAoCT,aAApC,CAAD,CAAlB,CADc,CAEd;AACD,GAHQ,EAGN,CAACF,QAAD,CAHM,CAAT;;AAKA,QAAMY,QAAQ,GAAIC,MAAD,IAAY;AAC3BT,IAAAA,SAAS,CAACS,MAAD,aAACA,MAAD,cAACA,MAAD,GAAW,CAAX,CAAT;;AAEA,QAAIA,MAAM,KAAK,EAAX,IAAiBC,KAAK,CAACD,MAAD,CAA1B,EAAoC;AAClCL,MAAAA,QAAQ,CAAC,iBAAD,CAAR;AACA;AACD;;AACD,QAAI,CAACK,MAAD,IAAWA,MAAM,KAAK,EAAtB,IAA4BA,MAAM,KAAK,GAA3C,EAAgD;AAC9CL,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AAED,QAAIC,eAAe,KAAKI,MAAxB,EAAgC;;AAChCP,IAAAA,OAAO,CAAC,KAAD,CAAP;;AAEA,QAAIT,OAAO,CAACgB,MAAD,EAASZ,QAAT,CAAP,CAA0Bc,EAA1B,CAA6BjB,SAAS,CAACE,QAAD,CAAtC,CAAJ,EACEQ,QAAQ,CAAC,iBAAD,CAAR,CADF,KAEKA,QAAQ,CAAC,IAAD,CAAR;AACN,GAlBD;;AAoBA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,WAAOX,GAAG,GACN,IAAIP,SAAJ,CAAcE,QAAd,EAAwBiB,QAAxB,EADM,GAENpB,OAAO,CAACM,KAAD,EAAQF,QAAR,EAAkB,IAAlB,CAAP,CAA+BgB,QAA/B,EAFJ;AAGD,GAJD;;AAMA,QAAMC,cAAc,GAAG,MAAM;AAC3BV,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACAF,IAAAA,OAAO,CAAC,IAAD,CAAP;;AACAF,IAAAA,SAAS,CAACR,OAAO,CAACI,QAAD,EAAWC,QAAX,CAAP,CAA4BU,OAA5B,CAAoCT,aAApC,CAAD,CAAT;AACD,GAJD;;AAMA,SAAO;AAAEC,IAAAA,KAAF;AAASM,IAAAA,eAAT;AAA0BF,IAAAA,KAA1B;AAAiCK,IAAAA,QAAjC;AAA2CI,IAAAA,QAA3C;AAAqDE,IAAAA;AAArD,GAAP;AACD,CA5CM;;GAAMnB,a","sourcesContent":["import { useEffect, useState } from 'react'\nimport { toLower, toUpper } from '../utils/utils'\nimport BigNumber from 'bignumber.js'\n\nexport const useInputValue = (maxValue, decimals = '18', fixedDecimals = 2) => {\n  const [value, _setValue] = useState('')\n  const [max, _setMax] = useState(false)\n  const [error, setError] = useState(null)\n  const [maxDisplayValue, setMaxDisplayValue] = useState(null)\n\n  useEffect(() => {\n    setMaxDisplayValue(toLower(maxValue, decimals).toFixed(fixedDecimals))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [maxValue])\n\n  const setValue = (_value) => {\n    _setValue(_value ?? 0)\n\n    if (_value !== '' && isNaN(_value)) {\n      setError('Invalid Number!')\n      return\n    }\n    if (!_value || _value === '' || _value === '0') {\n      setError(null)\n      return\n    }\n\n    if (maxDisplayValue === _value) return\n    _setMax(false)\n\n    if (toUpper(_value, decimals).gt(BigNumber(maxValue)))\n      setError('Invalid Amount!')\n    else setError(null)\n  }\n\n  const getValue = () => {\n    return max\n      ? new BigNumber(maxValue).toString()\n      : toUpper(value, decimals, true).toString()\n  }\n\n  const selectMaxValue = () => {\n    setError(null)\n    _setMax(true)\n    _setValue(toLower(maxValue, decimals).toFixed(fixedDecimals))\n  }\n\n  return { value, maxDisplayValue, error, setValue, getValue, selectMaxValue }\n}\n"]},"metadata":{},"sourceType":"module"}