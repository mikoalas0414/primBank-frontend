{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport { toLower } from '../utils/utils';\nimport { useToken } from './useContract';\nimport { useRefresh } from './useRefresh';\nimport { useWeb3 } from './useWeb3';\nimport BANKUSD_ABI from '../assets/abis/BankUSD.json';\nexport const useTokenBalance = function (address) {\n  _s();\n\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '18';\n  const tokenAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n  const contract = useToken(tokenAddress, BANKUSD_ABI.abi);\n  const [balance, setBalance] = useState(undefined);\n  const [displayBalance, setDisplayBalance] = useState(undefined);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3();\n  useEffect(() => {\n    const fetch = async () => {\n      contract.options.address = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n      const bal = await contract.methods.balanceOf(account).call();\n      setBalance(new BigNumber(bal));\n      setDisplayBalance(toLower(bal, decimals).toNumber().toFixed(2));\n    };\n\n    if (contract) {\n      fetch();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [contract, fastRefresh]);\n  return {\n    balance,\n    displayBalance\n  };\n};\n\n_s(useTokenBalance, \"/lPt9Phl7D2Y8aGLFSFHVKhl1oA=\", false, function () {\n  return [useToken, useRefresh, useWeb3];\n});\n\nexport const useRewardsbalance = function (address) {\n  _s2();\n\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '18';\n  const tokenAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n  const contract = useToken(tokenAddress, BANKUSD_ABI.abi);\n  const {\n    fastRefresh\n  } = useRefresh(); //Get Values Blockchain\n\n  const {\n    account\n  } = useWeb3();\n  const [accountIn, SetAccountIn] = useState(undefined);\n  const [index, SetIndex] = useState(undefined);\n  const [iteratiosnUntilProcessed, SetIteratiosnUntilProcessed] = useState(0);\n  const [withdrawableDividends, SetWithdrawableDividends] = useState(undefined);\n  const [totalDividends, SetTotalDividends] = useState(undefined);\n  const [lastClaimTime, SetLastClaimTime] = useState(undefined);\n  const [nextClaimTime, SetNextClaimTime] = useState(undefined);\n  const [secondsUntilAutoClaimAvailable, SetSecondsUntilAutoClaimAvailable] = useState(undefined);\n  useEffect(() => {\n    const fetch = async () => {\n      contract.options.address = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n      const result = await contract.methods.getAccountDividendsInfo(account).call();\n      let {\n        0: _accountIn,\n        1: _index,\n        2: _iteratiosnUntilProcessed,\n        3: _withdrawableDividends,\n        4: _totalDividends,\n        5: _lastClaimTime,\n        6: _nextClaimTime,\n        7: _secondsUntilAutoClaimAvailable\n      } = result;\n      SetAccountIn(_accountIn.toString());\n      SetIndex(new BigNumber(_index).toNumber());\n      SetIteratiosnUntilProcessed(new BigNumber(_iteratiosnUntilProcessed).toNumber());\n      SetWithdrawableDividends(new BigNumber(_withdrawableDividends).toNumber());\n      SetTotalDividends(toLower(_totalDividends, decimals).toNumber().toFixed(4));\n      SetSecondsUntilAutoClaimAvailable(new BigNumber(_secondsUntilAutoClaimAvailable).toNumber());\n      SetLastClaimTime(_lastClaimTime);\n      SetNextClaimTime(_nextClaimTime);\n    };\n\n    if (contract) {\n      fetch();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [contract, fastRefresh]);\n  return {\n    accountIn,\n    index,\n    iteratiosnUntilProcessed,\n    withdrawableDividends,\n    totalDividends,\n    lastClaimTime,\n    nextClaimTime,\n    secondsUntilAutoClaimAvailable\n  };\n};\n\n_s2(useRewardsbalance, \"BkZy0fp3m94VZGt1Ey3gZ48u494=\", false, function () {\n  return [useToken, useRefresh, useWeb3];\n});","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useBalance.jsx"],"names":["BigNumber","useEffect","useState","toLower","useToken","useRefresh","useWeb3","BANKUSD_ABI","useTokenBalance","address","decimals","tokenAddress","contract","abi","balance","setBalance","undefined","displayBalance","setDisplayBalance","fastRefresh","account","fetch","options","bal","methods","balanceOf","call","toNumber","toFixed","useRewardsbalance","accountIn","SetAccountIn","index","SetIndex","iteratiosnUntilProcessed","SetIteratiosnUntilProcessed","withdrawableDividends","SetWithdrawableDividends","totalDividends","SetTotalDividends","lastClaimTime","SetLastClaimTime","nextClaimTime","SetNextClaimTime","secondsUntilAutoClaimAvailable","SetSecondsUntilAutoClaimAvailable","result","getAccountDividendsInfo","_accountIn","_index","_iteratiosnUntilProcessed","_withdrawableDividends","_totalDividends","_lastClaimTime","_nextClaimTime","_secondsUntilAutoClaimAvailable","toString"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\nimport { toLower } from '../utils/utils'\nimport { useToken } from './useContract'\nimport { useRefresh } from './useRefresh'\nimport { useWeb3 } from './useWeb3'\nimport BANKUSD_ABI from '../assets/abis/BankUSD.json'\n\nexport const useTokenBalance = (address, decimals = '18') => {\n  const tokenAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n  const contract = useToken(tokenAddress, BANKUSD_ABI.abi)\n  const [balance, setBalance] = useState(undefined)\n  const [displayBalance, setDisplayBalance] = useState(undefined)\n  const { fastRefresh } = useRefresh()\n\n  const { account } = useWeb3()\n\n  useEffect(() => {\n    const fetch = async () => {\n      contract.options.address = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n      const bal = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(bal))\n      setDisplayBalance(toLower(bal, decimals).toNumber().toFixed(2))\n    }\n    if (contract) {\n      fetch()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contract, fastRefresh])\n\n  return { balance, displayBalance }\n}\n\nexport const useRewardsbalance = (address, decimals = '18') => {\n  const tokenAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n  const contract = useToken(tokenAddress, BANKUSD_ABI.abi)\n  const { fastRefresh } = useRefresh()\n\n  //Get Values Blockchain\n  const { account } = useWeb3()\n  const [accountIn, SetAccountIn] = useState(undefined)\n  const [index, SetIndex] = useState(undefined)\n  const [iteratiosnUntilProcessed, SetIteratiosnUntilProcessed] = useState(0)\n  const [withdrawableDividends, SetWithdrawableDividends] = useState(undefined)\n  const [totalDividends, SetTotalDividends] = useState(undefined)\n  const [lastClaimTime, SetLastClaimTime] = useState(undefined)\n  const [nextClaimTime, SetNextClaimTime] = useState(undefined)\n  const [\n    secondsUntilAutoClaimAvailable,\n    SetSecondsUntilAutoClaimAvailable,\n  ] = useState(undefined)\n\n  useEffect(() => {\n    const fetch = async () => {\n      contract.options.address = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n      const result = await contract.methods\n        .getAccountDividendsInfo(account)\n        .call()\n      let {\n        0: _accountIn,\n        1: _index,\n        2: _iteratiosnUntilProcessed,\n        3: _withdrawableDividends,\n        4: _totalDividends,\n        5: _lastClaimTime,\n        6: _nextClaimTime,\n        7: _secondsUntilAutoClaimAvailable,\n      } = result\n\n      SetAccountIn(_accountIn.toString())\n      SetIndex(new BigNumber(_index).toNumber())\n      SetIteratiosnUntilProcessed(\n        new BigNumber(_iteratiosnUntilProcessed).toNumber(),\n      )\n      SetWithdrawableDividends(new BigNumber(_withdrawableDividends).toNumber())\n      SetTotalDividends(\n        toLower(_totalDividends, decimals).toNumber().toFixed(4),\n      )\n      SetSecondsUntilAutoClaimAvailable(\n        new BigNumber(_secondsUntilAutoClaimAvailable).toNumber(),\n      )\n\n      SetLastClaimTime(_lastClaimTime)\n      SetNextClaimTime(_nextClaimTime)\n    }\n    if (contract) {\n      fetch()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contract, fastRefresh])\n\n  return {\n    accountIn,\n    index,\n    iteratiosnUntilProcessed,\n    withdrawableDividends,\n    totalDividends,\n    lastClaimTime,\n    nextClaimTime,\n    secondsUntilAutoClaimAvailable,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}