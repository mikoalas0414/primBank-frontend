{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport Web3 from 'web3';\nimport { useWeb3React } from '@web3-react/core';\nimport { useConfig } from '../contexts/configContext';\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\n\nexport const useWeb3 = () => {\n  _s();\n\n  const [balance, setBalance] = useState(undefined);\n  const {\n    config\n  } = useConfig();\n  let httpProvider;\n  let web3NoAccount;\n  const rpc = config.rpcUrls[config.chainId];\n\n  if (rpc) {\n    httpProvider = new Web3.providers.HttpProvider(rpc);\n    web3NoAccount = new Web3(httpProvider);\n  }\n\n  const {\n    library,\n    account\n  } = useWeb3React();\n  const refEth = useRef(library);\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount);\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount);\n      refEth.current = library;\n    }\n  }, [library, web3NoAccount]);\n  useEffect(() => {\n    const fetch = async () => {\n      const bal = await web3.eth.getBalance(account);\n      setBalance(bal);\n    };\n\n    if (account && web3) {\n      fetch();\n    }\n  }, [web3, account]);\n  return {\n    web3,\n    account,\n    balance,\n    displayAccount: `${account === null || account === void 0 ? void 0 : account.substring(0, 4)}...${account === null || account === void 0 ? void 0 : account.substring((account === null || account === void 0 ? void 0 : account.length) - 4, account === null || account === void 0 ? void 0 : account.length)}`,\n    connected: account ? true : false\n  };\n};\n\n_s(useWeb3, \"FjP2SPVW60vDZujpHAcpRWzJHGQ=\", false, function () {\n  return [useConfig, useWeb3React];\n});","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useWeb3.jsx"],"names":["useEffect","useState","useRef","Web3","useWeb3React","useConfig","useWeb3","balance","setBalance","undefined","config","httpProvider","web3NoAccount","rpc","rpcUrls","chainId","providers","HttpProvider","library","account","refEth","web3","setweb3","current","fetch","bal","eth","getBalance","displayAccount","substring","length","connected"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACQ,SAAD,CAAtC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaL,SAAS,EAA5B;AACA,MAAIM,YAAJ;AACA,MAAIC,aAAJ;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,OAAP,CAAeJ,MAAM,CAACK,OAAtB,CAAZ;;AACA,MAAIF,GAAJ,EAAS;AACPF,IAAAA,YAAY,GAAG,IAAIR,IAAI,CAACa,SAAL,CAAeC,YAAnB,CAAgCJ,GAAhC,CAAf;AACAD,IAAAA,aAAa,GAAG,IAAIT,IAAJ,CAASQ,YAAT,CAAhB;AACD;;AAED,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBf,YAAY,EAAzC;AACA,QAAMgB,MAAM,GAAGlB,MAAM,CAACgB,OAAD,CAArB;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAACiB,OAAO,GAAG,IAAIf,IAAJ,CAASe,OAAT,CAAH,GAAuBN,aAA/B,CAAhC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,OAAO,KAAKE,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,MAAAA,OAAO,CAACJ,OAAO,GAAG,IAAIf,IAAJ,CAASe,OAAT,CAAH,GAAuBN,aAA/B,CAAP;AACAQ,MAAAA,MAAM,CAACG,OAAP,GAAiBL,OAAjB;AACD;AACF,GALQ,EAKN,CAACA,OAAD,EAAUN,aAAV,CALM,CAAT;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,KAAK,GAAG,YAAY;AACxB,YAAMC,GAAG,GAAG,MAAMJ,IAAI,CAACK,GAAL,CAASC,UAAT,CAAoBR,OAApB,CAAlB;AACAX,MAAAA,UAAU,CAACiB,GAAD,CAAV;AACD,KAHD;;AAIA,QAAIN,OAAO,IAAIE,IAAf,EAAqB;AACnBG,MAAAA,KAAK;AACN;AACF,GARQ,EAQN,CAACH,IAAD,EAAOF,OAAP,CARM,CAAT;AAUA,SAAO;AACLE,IAAAA,IADK;AAELF,IAAAA,OAFK;AAGLZ,IAAAA,OAHK;AAILqB,IAAAA,cAAc,EAAG,GAAET,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEU,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAyB,MAAKV,OAAjC,aAAiCA,OAAjC,uBAAiCA,OAAO,CAAEU,SAAT,CAC/C,CAAAV,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEW,MAAT,IAAkB,CAD6B,EAE/CX,OAF+C,aAE/CA,OAF+C,uBAE/CA,OAAO,CAAEW,MAFsC,CAG/C,EAPG;AAQLC,IAAAA,SAAS,EAAEZ,OAAO,GAAG,IAAH,GAAU;AARvB,GAAP;AAUD,CA1CM;;GAAMb,O;UAEQD,S,EASUD,Y","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { useConfig } from '../contexts/configContext'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nexport const useWeb3 = () => {\n  const [balance, setBalance] = useState(undefined)\n  const { config } = useConfig()\n  let httpProvider\n  let web3NoAccount\n  const rpc = config.rpcUrls[config.chainId]\n  if (rpc) {\n    httpProvider = new Web3.providers.HttpProvider(rpc)\n    web3NoAccount = new Web3(httpProvider)\n  }\n\n  const { library, account } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : web3NoAccount)\n      refEth.current = library\n    }\n  }, [library, web3NoAccount])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const bal = await web3.eth.getBalance(account)\n      setBalance(bal)\n    }\n    if (account && web3) {\n      fetch()\n    }\n  }, [web3, account])\n\n  return {\n    web3,\n    account,\n    balance,\n    displayAccount: `${account?.substring(0, 4)}...${account?.substring(\n      account?.length - 4,\n      account?.length,\n    )}`,\n    connected: account ? true : false,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}