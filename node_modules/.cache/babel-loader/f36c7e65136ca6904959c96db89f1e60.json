{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useERC20, useToken } from './useContract';\nimport { useState, useEffect } from 'react';\nimport { useWeb3 } from './useWeb3';\nimport BigNumber from 'bignumber.js';\nimport { ZERO_ADDRESS } from '../constants/constants';\nimport { STATE } from '../constants/enums';\nimport PRIMBANK_ABI from '../assets/abis/PrimBank.json';\nexport const ZERO_BALANCE = new BigNumber(0);\nexport const useClaimRewards = requiredClaimedState => {\n  _s();\n\n  const BankUSDAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n  const contractBANKUSD = useToken(BankUSDAddress, PRIMBANK_ABI.abi);\n  const [claimBalance, setclaimBalance] = useState(ZERO_BALANCE);\n  const [claimState, setClaimState] = useState(STATE.IDLE);\n  const [isClaimed, setisClaimed] = useState(false);\n  const {\n    account\n  } = useWeb3();\n  const token = useERC20(BankUSDAddress);\n\n  const fetchClaimState = async () => {\n    if (BankUSDAddress === ZERO_ADDRESS) {\n      setisClaimed(true);\n      return;\n    }\n\n    try {\n      const bal = await token.methods.balanceOf(account).call();\n      const claimBal = new BigNumber(bal);\n      setclaimBalance(claimBal);\n      setisClaimed(claimBal.gte(new BigNumber(requiredClaimedState ? requiredClaimedState : 1)));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    if (account && token) {\n      fetchClaimState();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [account, token]);\n\n  const claim = async () => {\n    try {\n      setClaimState(STATE.BUSY);\n      contractBANKUSD.options.address = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A';\n      await contractBANKUSD.methods.claim().send({\n        from: account\n      }).on('transactionHash', hash => {});\n      await fetchClaimState();\n      setClaimState(STATE.SUCCEED);\n    } catch (e) {\n      console.log(e);\n      setClaimState(STATE.FAILED);\n    }\n  };\n\n  return {\n    claimBalance,\n    isClaimed,\n    claimState,\n    claim\n  };\n};\n\n_s(useClaimRewards, \"NhTLEGMd1yx6Cn/0LqCJcSOCkCo=\", false, function () {\n  return [useToken, useWeb3, useERC20];\n});","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useClaim.jsx"],"names":["useERC20","useToken","useState","useEffect","useWeb3","BigNumber","ZERO_ADDRESS","STATE","PRIMBANK_ABI","ZERO_BALANCE","useClaimRewards","requiredClaimedState","BankUSDAddress","contractBANKUSD","abi","claimBalance","setclaimBalance","claimState","setClaimState","IDLE","isClaimed","setisClaimed","account","token","fetchClaimState","bal","methods","balanceOf","call","claimBal","gte","e","console","log","claim","BUSY","options","address","send","from","on","hash","SUCCEED","FAILED"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,eAAnC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,IAAIJ,SAAJ,CAAc,CAAd,CAArB;AAEP,OAAO,MAAMK,eAAe,GAAIC,oBAAD,IAA0B;AAAA;;AACvD,QAAMC,cAAc,GAAG,4CAAvB;AACA,QAAMC,eAAe,GAAGZ,QAAQ,CAACW,cAAD,EAAiBJ,YAAY,CAACM,GAA9B,CAAhC;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAACO,YAAD,CAAhD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAACK,KAAK,CAACY,IAAP,CAA5C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAAEoB,IAAAA;AAAF,MAAclB,OAAO,EAA3B;AACA,QAAMmB,KAAK,GAAGvB,QAAQ,CAACY,cAAD,CAAtB;;AAEA,QAAMY,eAAe,GAAG,YAAY;AAClC,QAAIZ,cAAc,KAAKN,YAAvB,EAAqC;AACnCe,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD;;AACD,QAAI;AACF,YAAMI,GAAG,GAAG,MAAMF,KAAK,CAACG,OAAN,CAAcC,SAAd,CAAwBL,OAAxB,EAAiCM,IAAjC,EAAlB;AACA,YAAMC,QAAQ,GAAG,IAAIxB,SAAJ,CAAcoB,GAAd,CAAjB;AACAT,MAAAA,eAAe,CAACa,QAAD,CAAf;AACAR,MAAAA,YAAY,CACVQ,QAAQ,CAACC,GAAT,CACE,IAAIzB,SAAJ,CAAcM,oBAAoB,GAAGA,oBAAH,GAA0B,CAA5D,CADF,CADU,CAAZ;AAKD,KATD,CASE,OAAOoB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAjBD;;AAmBA5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,OAAO,IAAIC,KAAf,EAAsB;AACpBC,MAAAA,eAAe;AAChB,KAHa,CAId;;AACD,GALQ,EAKN,CAACF,OAAD,EAAUC,KAAV,CALM,CAAT;;AAOA,QAAMW,KAAK,GAAG,YAAY;AACxB,QAAI;AACFhB,MAAAA,aAAa,CAACX,KAAK,CAAC4B,IAAP,CAAb;AACAtB,MAAAA,eAAe,CAACuB,OAAhB,CAAwBC,OAAxB,GACE,4CADF;AAGA,YAAMxB,eAAe,CAACa,OAAhB,CACHQ,KADG,GAEHI,IAFG,CAEE;AAAEC,QAAAA,IAAI,EAAEjB;AAAR,OAFF,EAGHkB,EAHG,CAGA,iBAHA,EAGoBC,IAAD,IAAU,CAAE,CAH/B,CAAN;AAKA,YAAMjB,eAAe,EAArB;AAEAN,MAAAA,aAAa,CAACX,KAAK,CAACmC,OAAP,CAAb;AACD,KAbD,CAaE,OAAOX,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAb,MAAAA,aAAa,CAACX,KAAK,CAACoC,MAAP,CAAb;AACD;AACF,GAlBD;;AAoBA,SAAO;AACL5B,IAAAA,YADK;AAELK,IAAAA,SAFK;AAGLH,IAAAA,UAHK;AAILiB,IAAAA;AAJK,GAAP;AAMD,CA/DM;;GAAMxB,e;UAEaT,Q,EAMJG,O,EACNJ,Q","sourcesContent":["import { useERC20, useToken } from './useContract'\nimport { useState, useEffect } from 'react'\nimport { useWeb3 } from './useWeb3'\nimport BigNumber from 'bignumber.js'\nimport { ZERO_ADDRESS } from '../constants/constants'\nimport { STATE } from '../constants/enums'\nimport PRIMBANK_ABI from '../assets/abis/PrimBank.json'\n\nexport const ZERO_BALANCE = new BigNumber(0)\n\nexport const useClaimRewards = (requiredClaimedState) => {\n  const BankUSDAddress = '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n  const contractBANKUSD = useToken(BankUSDAddress, PRIMBANK_ABI.abi)\n\n  const [claimBalance, setclaimBalance] = useState(ZERO_BALANCE)\n  const [claimState, setClaimState] = useState(STATE.IDLE)\n  const [isClaimed, setisClaimed] = useState(false)\n\n  const { account } = useWeb3()\n  const token = useERC20(BankUSDAddress)\n\n  const fetchClaimState = async () => {\n    if (BankUSDAddress === ZERO_ADDRESS) {\n      setisClaimed(true)\n      return\n    }\n    try {\n      const bal = await token.methods.balanceOf(account).call()\n      const claimBal = new BigNumber(bal)\n      setclaimBalance(claimBal)\n      setisClaimed(\n        claimBal.gte(\n          new BigNumber(requiredClaimedState ? requiredClaimedState : 1),\n        ),\n      )\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    if (account && token) {\n      fetchClaimState()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, token])\n\n  const claim = async () => {\n    try {\n      setClaimState(STATE.BUSY)\n      contractBANKUSD.options.address =\n        '0x3039f0774E486CcC89bc66dE942C35ca6f296d4A'\n\n      await contractBANKUSD.methods\n        .claim()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {})\n\n      await fetchClaimState()\n\n      setClaimState(STATE.SUCCEED)\n    } catch (e) {\n      console.log(e)\n      setClaimState(STATE.FAILED)\n    }\n  }\n\n  return {\n    claimBalance,\n    isClaimed,\n    claimState,\n    claim,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}