{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport const switchChain = async network => {\n  const provider = window.ethereum;\n\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: network.chainId\n        }]\n      });\n      return true;\n    } catch (error) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (error.code === 4902) {\n        try {\n          await provider.request({\n            method: 'wallet_addEthereumChain',\n            params: [network]\n          });\n          return true;\n        } catch (addError) {\n          console.error(\"Can't setup the network on metamask because window.ethereum is undefined\");\n          return false;\n        }\n      }\n\n      console.error(\"Can't setup the network on metamask because window.ethereum is undefined\");\n      return false;\n    }\n  }\n};\nexport const addTokenToWallet = async (tokenAddress, tokenSymbol, tokenDecimals, tokenImage) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage\n      }\n    }\n  });\n  return tokenAdded;\n};\nexport const toLower = function (value) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '18';\n  let bignumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let ans = new BigNumber('0');\n  if (value) ans = new BigNumber(value.toString()).div(new BigNumber(10).exponentiatedBy(decimals));\n  if (bignumber) return ans;else return ans.toNumber();\n};\nexport const toUpper = function (value) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '18';\n  let bignumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let ans = new BigNumber('0');\n\n  if (value) {\n    ans = new BigNumber(value.toString()).times(new BigNumber(10).exponentiatedBy(decimals));\n  }\n\n  if (bignumber) return ans;else return ans.toNumber();\n};\nexport const getTimeLeft = delta => {\n  if (!delta) return '';\n  if (delta && delta === '0') return null; // calculate (and subtract) whole days\n\n  var days = Math.floor(delta / 86400);\n  delta -= days * 86400;\n  days = parseInt(days); // calculate (and subtract) whole hours\n\n  var hours = Math.floor(delta / 3600) % 24;\n  delta -= hours * 3600;\n  hours = parseInt(hours); // calculate (and subtract) whole minutes\n\n  var minutes = Math.floor(delta / 60) % 60;\n  delta -= minutes * 60;\n  minutes = parseInt(minutes); // what's left is seconds\n\n  var seconds = delta % 60;\n  seconds = parseInt(seconds);\n  return {\n    days,\n    hours,\n    minutes,\n    seconds\n  };\n};\nexport const getApy = function (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) {\n  let blocksPerYear = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new BigNumber(10512000);\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(blocksPerYear);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/utils/utils.jsx"],"names":["BigNumber","switchChain","network","provider","window","ethereum","request","method","params","chainId","error","code","addError","console","addTokenToWallet","tokenAddress","tokenSymbol","tokenDecimals","tokenImage","tokenAdded","type","options","address","symbol","decimals","image","toLower","value","bignumber","ans","toString","div","exponentiatedBy","toNumber","toUpper","times","getTimeLeft","delta","days","Math","floor","parseInt","hours","minutes","seconds","getApy","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","blocksPerYear","totalRewardPricePerYear","totalStakingTokenInPool","apy","isNaN","isFinite"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const switchChain = async (network) => {\n  const provider = window.ethereum\n  if (provider) {\n    try {\n      await provider.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: network.chainId }],\n      })\n      return true\n    } catch (error) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (error.code === 4902) {\n        try {\n          await provider.request({\n            method: 'wallet_addEthereumChain',\n            params: [network],\n          })\n          return true\n        } catch (addError) {\n          console.error(\n            \"Can't setup the network on metamask because window.ethereum is undefined\",\n          )\n          return false\n        }\n      }\n      console.error(\n        \"Can't setup the network on metamask because window.ethereum is undefined\",\n      )\n      return false\n    }\n  }\n}\n\nexport const addTokenToWallet = async (\n  tokenAddress,\n  tokenSymbol,\n  tokenDecimals,\n  tokenImage,\n) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n\nexport const toLower = (value, decimals = '18', bignumber = true) => {\n  let ans = new BigNumber('0')\n  if (value)\n    ans = new BigNumber(value.toString()).div(\n      new BigNumber(10).exponentiatedBy(decimals),\n    )\n  if (bignumber) return ans\n  else return ans.toNumber()\n}\n\nexport const toUpper = (value, decimals = '18', bignumber = true) => {\n  let ans = new BigNumber('0')\n  if (value) {\n    ans = new BigNumber(value.toString()).times(\n      new BigNumber(10).exponentiatedBy(decimals),\n    )\n  }\n  if (bignumber) return ans\n  else return ans.toNumber()\n}\n\nexport const getTimeLeft = (delta) => {\n  if (!delta) return ''\n  if (delta && delta === '0') return null\n\n  // calculate (and subtract) whole days\n  var days = Math.floor(delta / 86400)\n  delta -= days * 86400\n  days = parseInt(days)\n\n  // calculate (and subtract) whole hours\n  var hours = Math.floor(delta / 3600) % 24\n  delta -= hours * 3600\n  hours = parseInt(hours)\n\n  // calculate (and subtract) whole minutes\n  var minutes = Math.floor(delta / 60) % 60\n  delta -= minutes * 60\n  minutes = parseInt(minutes)\n\n  // what's left is seconds\n  var seconds = delta % 60\n  seconds = parseInt(seconds)\n\n  return { days, hours, minutes, seconds }\n}\n\nexport const getApy = (\n  stakingTokenPrice,\n  rewardTokenPrice,\n  totalStaked,\n  tokenPerBlock,\n  blocksPerYear = new BigNumber(10512000),\n) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice)\n    .times(tokenPerBlock)\n    .times(blocksPerYear)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(\n    totalStaked,\n  )\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\n}\n"]},"metadata":{},"sourceType":"module"}