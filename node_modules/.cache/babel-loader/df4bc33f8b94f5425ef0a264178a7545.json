{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { connectorLocalStorageKey } from '../constants/constants';\nimport { useConfig } from '../contexts/configContext';\nimport { connectorNames } from './useConnectors';\nimport useWallet from './useWallet';\n\nconst _binanceChainListener = async () => new Promise(resolve => Object.defineProperty(window, 'BinanceChain', {\n  get() {\n    return this.bsc;\n  },\n\n  set(bsc) {\n    this.bsc = bsc;\n    resolve();\n  }\n\n}));\n\nexport const useEagerConnect = () => {\n  _s();\n\n  const login = useWallet();\n  const config = useConfig();\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey);\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === connectorNames.bsc;\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain'); // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId));\n\n        return;\n      }\n\n      login(connectorId);\n    } else {\n      login(config.config.defaultConnector);\n    }\n  }, [login, config.config.defaultConnector]);\n};\n\n_s(useEagerConnect, \"yi6uPUsSQuu5edMqVg2vVxGroh0=\", false, function () {\n  return [useWallet, useConfig];\n});","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useEgerConnect.jsx"],"names":["useEffect","connectorLocalStorageKey","useConfig","connectorNames","useWallet","_binanceChainListener","Promise","resolve","Object","defineProperty","window","get","bsc","set","useEagerConnect","login","config","connectorId","localStorage","getItem","isConnectorBinanceChain","isBinanceChainDefined","Reflect","has","then","defaultConnector"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,wBAAT,QAAyC,wBAAzC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,qBAAqB,GAAG,YAC5B,IAAIC,OAAJ,CAAaC,OAAD,IACVC,MAAM,CAACC,cAAP,CAAsBC,MAAtB,EAA8B,cAA9B,EAA8C;AAC5CC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKC,GAAZ;AACD,GAH2C;;AAI5CC,EAAAA,GAAG,CAACD,GAAD,EAAM;AACP,SAAKA,GAAL,GAAWA,GAAX;AACAL,IAAAA,OAAO;AACR;;AAP2C,CAA9C,CADF,CADF;;AAaA,OAAO,MAAMO,eAAe,GAAG,MAAM;AAAA;;AACnC,QAAMC,KAAK,GAAGX,SAAS,EAAvB;AACA,QAAMY,MAAM,GAAGd,SAAS,EAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,WAAW,GAAGP,MAAM,CAACQ,YAAP,CAAoBC,OAApB,CAA4BlB,wBAA5B,CAApB;;AAEA,QAAIgB,WAAJ,EAAiB;AACf,YAAMG,uBAAuB,GAAGH,WAAW,KAAKd,cAAc,CAACS,GAA/D;AACA,YAAMS,qBAAqB,GAAGC,OAAO,CAACC,GAAR,CAAYb,MAAZ,EAAoB,cAApB,CAA9B,CAFe,CAIf;AACA;;AACA,UAAIU,uBAAuB,IAAI,CAACC,qBAAhC,EAAuD;AACrDhB,QAAAA,qBAAqB,GAAGmB,IAAxB,CAA6B,MAAMT,KAAK,CAACE,WAAD,CAAxC;;AACA;AACD;;AAEDF,MAAAA,KAAK,CAACE,WAAD,CAAL;AACD,KAZD,MAYO;AACLF,MAAAA,KAAK,CAACC,MAAM,CAACA,MAAP,CAAcS,gBAAf,CAAL;AACD;AACF,GAlBQ,EAkBN,CAACV,KAAD,EAAQC,MAAM,CAACA,MAAP,CAAcS,gBAAtB,CAlBM,CAAT;AAmBD,CAvBM;;GAAMX,e;UACGV,S,EACCF,S","sourcesContent":["import { useEffect } from 'react'\nimport { connectorLocalStorageKey } from '../constants/constants'\nimport { useConfig } from '../contexts/configContext'\nimport { connectorNames } from './useConnectors'\nimport useWallet from './useWallet'\n\nconst _binanceChainListener = async () =>\n  new Promise((resolve) =>\n    Object.defineProperty(window, 'BinanceChain', {\n      get() {\n        return this.bsc\n      },\n      set(bsc) {\n        this.bsc = bsc\n        resolve()\n      },\n    }),\n  )\n\nexport const useEagerConnect = () => {\n  const login = useWallet()\n  const config = useConfig()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey)\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === connectorNames.bsc\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n        return\n      }\n\n      login(connectorId)\n    } else {\n      login(config.config.defaultConnector)\n    }\n  }, [login, config.config.defaultConnector])\n}\n"]},"metadata":{},"sourceType":"module"}