{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { UnsupportedChainIdError } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport { connectorLocalStorageKey } from '../constants/constants';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { switchChain } from '../utils/utils';\nimport { useConnectors } from './useConnectors';\nimport { useConfig } from '../contexts/configContext';\nimport { useWalletModal } from './useWalletModal';\n\nconst useWallet = () => {\n  _s();\n\n  const {\n    setError,\n    activate\n  } = useWalletModal();\n  const {\n    config\n  } = useConfig();\n  const connectorsByName = useConnectors();\n  const login = useCallback(connectorID => {\n    if (!connectorsByName) return;\n    const connector = connectorsByName[connectorID];\n\n    if (connector) {\n      window.localStorage.setItem(connectorLocalStorageKey, connectorID);\n      activate(connector, async error => {\n        if (error instanceof UnsupportedChainIdError) {\n          const network = config.unsupportedChainSetup[config.chainId];\n          const hasSetup = await switchChain(network !== null && network !== void 0 ? network : {\n            chainId: `0x${parseInt(config.chainId).toString(16)}`\n          });\n\n          if (hasSetup) {\n            await activate(connector);\n            setError(undefined);\n          } else {\n            setError(`Unable to connect to required network ${config.chainId}`);\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey);\n\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            setError('Provider Error', 'No provider was found');\n          } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\n            if (connector instanceof WalletConnectConnector) {\n              connector.walletConnectProvider = null;\n            }\n\n            setError('Authorization Error', 'Please authorize to access your account');\n          } else {\n            setError(error.name, error.message);\n          }\n        }\n      });\n    } else {\n      setError(\"Can't find connector\", 'The connector config is wrong');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [connectorsByName]);\n  return login;\n};\n\n_s(useWallet, \"Hc2DDVL/W+ujlrHw2EhOrsVjEUI=\", false, function () {\n  return [useWalletModal, useConfig, useConnectors];\n});\n\nexport default useWallet;","map":{"version":3,"sources":["/Users/nlwsoft/Documents/GitHub/primBank-frontend/src/hooks/useWallet.jsx"],"names":["useCallback","UnsupportedChainIdError","NoBscProviderError","connectorLocalStorageKey","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","switchChain","useConnectors","useConfig","useWalletModal","useWallet","setError","activate","config","connectorsByName","login","connectorID","connector","window","localStorage","setItem","error","network","unsupportedChainSetup","chainId","hasSetup","parseInt","toString","undefined","removeItem","walletConnectProvider","name","message"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,wBAAT,QAAyC,wBAAzC;AACA,SACEC,uBADF,EAEEC,wBAAwB,IAAIC,gCAF9B,QAGO,gCAHP;AAIA,SACED,wBAAwB,IAAIE,qCAD9B,EAEEC,sBAFF,QAGO,qCAHP;AAIA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBH,cAAc,EAA7C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAaL,SAAS,EAA5B;AACA,QAAMM,gBAAgB,GAAGP,aAAa,EAAtC;AAEA,QAAMQ,KAAK,GAAGlB,WAAW,CACtBmB,WAAD,IAAiB;AACf,QAAI,CAACF,gBAAL,EAAuB;AACvB,UAAMG,SAAS,GAAGH,gBAAgB,CAACE,WAAD,CAAlC;;AACA,QAAIC,SAAJ,EAAe;AACbC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BpB,wBAA5B,EAAsDgB,WAAtD;AACAJ,MAAAA,QAAQ,CAACK,SAAD,EAAY,MAAOI,KAAP,IAAiB;AACnC,YAAIA,KAAK,YAAYvB,uBAArB,EAA8C;AAC5C,gBAAMwB,OAAO,GAAGT,MAAM,CAACU,qBAAP,CAA6BV,MAAM,CAACW,OAApC,CAAhB;AACA,gBAAMC,QAAQ,GAAG,MAAMnB,WAAW,CAChCgB,OADgC,aAChCA,OADgC,cAChCA,OADgC,GACrB;AACTE,YAAAA,OAAO,EAAG,KAAIE,QAAQ,CAACb,MAAM,CAACW,OAAR,CAAR,CAAyBG,QAAzB,CAAkC,EAAlC,CAAsC;AAD3C,WADqB,CAAlC;;AAKA,cAAIF,QAAJ,EAAc;AACZ,kBAAMb,QAAQ,CAACK,SAAD,CAAd;AACAN,YAAAA,QAAQ,CAACiB,SAAD,CAAR;AACD,WAHD,MAGO;AACLjB,YAAAA,QAAQ,CACL,yCAAwCE,MAAM,CAACW,OAAQ,EADlD,CAAR;AAGD;AACF,SAfD,MAeO;AACLN,UAAAA,MAAM,CAACC,YAAP,CAAoBU,UAApB,CAA+B7B,wBAA/B;;AACA,cACEqB,KAAK,YAAYpB,uBAAjB,IACAoB,KAAK,YAAYtB,kBAFnB,EAGE;AACAY,YAAAA,QAAQ,CAAC,gBAAD,EAAmB,uBAAnB,CAAR;AACD,WALD,MAKO,IACLU,KAAK,YAAYlB,gCAAjB,IACAkB,KAAK,YAAYjB,qCAFZ,EAGL;AACA,gBAAIa,SAAS,YAAYZ,sBAAzB,EAAiD;AAC/CY,cAAAA,SAAS,CAACa,qBAAV,GAAkC,IAAlC;AACD;;AACDnB,YAAAA,QAAQ,CACN,qBADM,EAEN,yCAFM,CAAR;AAID,WAXM,MAWA;AACLA,YAAAA,QAAQ,CAACU,KAAK,CAACU,IAAP,EAAaV,KAAK,CAACW,OAAnB,CAAR;AACD;AACF;AACF,OAtCO,CAAR;AAuCD,KAzCD,MAyCO;AACLrB,MAAAA,QAAQ,CAAC,sBAAD,EAAyB,+BAAzB,CAAR;AACD,KA9Cc,CA+Cf;;AACD,GAjDsB,EAkDvB;AACA,GAACG,gBAAD,CAnDuB,CAAzB;AAsDA,SAAOC,KAAP;AACD,CA5DD;;GAAML,S;UAC2BD,c,EACZD,S,EACMD,a;;;AA2D3B,eAAeG,SAAf","sourcesContent":["import { useCallback } from 'react'\nimport { UnsupportedChainIdError } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport { connectorLocalStorageKey } from '../constants/constants'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { switchChain } from '../utils/utils'\nimport { useConnectors } from './useConnectors'\nimport { useConfig } from '../contexts/configContext'\nimport { useWalletModal } from './useWalletModal'\n\nconst useWallet = () => {\n  const { setError, activate } = useWalletModal()\n  const { config } = useConfig()\n  const connectorsByName = useConnectors()\n\n  const login = useCallback(\n    (connectorID) => {\n      if (!connectorsByName) return\n      const connector = connectorsByName[connectorID]\n      if (connector) {\n        window.localStorage.setItem(connectorLocalStorageKey, connectorID)\n        activate(connector, async (error) => {\n          if (error instanceof UnsupportedChainIdError) {\n            const network = config.unsupportedChainSetup[config.chainId]\n            const hasSetup = await switchChain(\n              network ?? {\n                chainId: `0x${parseInt(config.chainId).toString(16)}`,\n              },\n            )\n            if (hasSetup) {\n              await activate(connector)\n              setError(undefined)\n            } else {\n              setError(\n                `Unable to connect to required network ${config.chainId}`,\n              )\n            }\n          } else {\n            window.localStorage.removeItem(connectorLocalStorageKey)\n            if (\n              error instanceof NoEthereumProviderError ||\n              error instanceof NoBscProviderError\n            ) {\n              setError('Provider Error', 'No provider was found')\n            } else if (\n              error instanceof UserRejectedRequestErrorInjected ||\n              error instanceof UserRejectedRequestErrorWalletConnect\n            ) {\n              if (connector instanceof WalletConnectConnector) {\n                connector.walletConnectProvider = null\n              }\n              setError(\n                'Authorization Error',\n                'Please authorize to access your account',\n              )\n            } else {\n              setError(error.name, error.message)\n            }\n          }\n        })\n      } else {\n        setError(\"Can't find connector\", 'The connector config is wrong')\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [connectorsByName],\n  )\n\n  return login\n}\n\nexport default useWallet\n"]},"metadata":{},"sourceType":"module"}